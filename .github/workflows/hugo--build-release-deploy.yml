name: Hugo Build, Release, and Deploy Reusable Workflow

on:
  workflow_call:
    inputs:
      # GitHub Input Vars
      github-run-id:
        description: ''
        default: ''
        required: false
        type: string
      github-workflow:
        description: ''
        default: ''
        required: false
        type: string
      github-workflow-ref:
        description: ''
        default: ''
        required: false
        type: string
      github-workflow-sha:
        description: ''
        default: ''
        required: false
        type: string
      github-workspace:
        description: ''
        default: ''
        required: false
        type: string
      github-repository:
        description: ''
        default: ''
        required: false
        type: string
      github-repository-owner:
        description: ''
        default: ''
        required: false
        type: string
      github-repository-name:
        description: ''
        default: ''
        required: false
        type: string
      github-repository-url:
        description: ''
        default: ''
        required: false
        type: string
      github-action-ref:
        description: ''
        default: ''
        required: false
        type: string
      github-event-name:
        description: ''
        default: ''
        required: false
        type: string
      github-actor:
        description: ''
        default: ''
        required: false
        type: string
      github-triggering-actor:
        description: ''
        default: ''
        required: false
        type: string
      github-base-ref:
        description: ''
        default: ''
        required: false
        type: string
      github-ref-name:
        description: ''
        default: ''
        required: false
        type: string
      github-ref-type:
        description: ''
        default: ''
        required: false
        type: string
      github-ref:
        description: ''
        default: ''
        required: false
        type: string
      github-sha:
        description: ''
        default: ''
        required: false
        type: string

      # Build Input Vars
      container-registry:                 # container registry e.g. ghcr.io
        required: true
        type: string
      container-image-name:               # name of container image i.e. github package
        required: true
        type: string
      hugo-context-root:                  # root path for hugo build
        required: true
        type: string
      hugo-devl-url:                      # hugo development url
        required: true
        type: string
      hugo-prod-url:                      # hugo production url
        required: true
        type: string

      # Release Input Vars
      build-artifact-name:                # name of build artifact to transfer between jobs/workflows
        required: true
        type: string
      release-tag-name-type:              # semvar | iso
        required: true
        type: string

      # Deployment Input Vars
      website-fqdn:              # fqdn of website
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CONTAINER_TAG: "${{ inputs.container-registry }}/chnm/${{ inputs.container-image-name }}:latest"
  RELEASE_NAME: ''
  RELEASE_TAG_NAME: ''

jobs:

#################
###   BUILD   ###
#################  

  build-hugo:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - run: echo ${{ env.GITHUB_TOKEN }}
      - run: echo ${{ secrets.GH_TOKEN_PACKAGES_WRITE }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ inputs.github-repository-owner }}
          password: ${{ env.GITHUB_TOKEN }}
          registry: ${{ inputs.container-registry }}

      - name: Build and Push Docker Image for Local Dev
        uses: docker/build-push-action@v4
        with:
          context: "${{ inputs.hugo-context-root }}"
          push: true
          tags: "${{ env.CONTAINER_TAG }}"
          platforms: linux/amd64

      - name: Build Docker Image (devl)
        if: inputs.github-ref == 'refs/heads/preview'
        uses: docker/build-push-action@v4
        with:
          context: "${{ inputs.hugo-context-root }}"
          push: false
          tags: "${{ env.CONTAINER_TAG }}"
          platforms: linux/amd64
          build-args: |
            hugobuildargs=--cleanDestinationDir --buildDrafts --buildFuture --baseURL ${{ inputs.hugo-devl-url }}

      - name: Build Docker Image (prod)
        if: inputs.github-ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: "${{ inputs.hugo-context-root }}"
          push: false
          tags: "${{ env.CONTAINER_TAG }}"
          platforms: linux/amd64
          build-args: |
            hugobuildargs=--cleanDestinationDir --minify --baseURL ${{ inputs.hugo-prod-url }}

      - name: Extract build artifact from docker image
        uses: shrink/actions-docker-extract@v2
        id: extract
        with:
          image: "${{ env.CONTAINER_TAG }}"
          path: /usr/share/nginx/html/

      - name: Archive build artifact
        run: tar czvf ${{ inputs.build-artifact-name }}.tar.gz -C ${{ steps.extract.outputs.destination }}/html .

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          path: "./${{ inputs.build-artifact-name }}.tar.gz"
          name: "${{ inputs.build-artifact-name }}"

###################
###   RELEASE   ###
###################

  release-iso:
    name: Determine ISO Release Name & Tag
    needs: [build-hugo]
    if: inputs.release-tag-name-type == 'iso'
    runs-on: ubuntu-latest
    steps:

      - id: build_timestamp
        name: Get build timestamp
        run: echo "ts=$(TZ=America/New_York date +'%Y-%m-%dT%H:%M:%S%z')" >> $GITHUB_OUTPUT

      - id: build_timestamp_for_tag
        name: Get build timestamp for tag
        run: echo "ts=$(TZ=America/New_York date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set RELEASE_NAME env
        run: echo "RELEASE_NAME=${{ steps.build_timestamp.outputs.ts }}" >> $GITHUB_ENV
      - name: Set RELEASE_TAG_NAME env
        run: echo "RELEASE_TAG_NAME=${{ steps.build_timestamp_for_tag.outputs.ts }}" >> $GITHUB_ENV

    outputs:
      release_name: ${{ env.RELEASE_NAME }}    
      release_tag_name: ${{ env.RELEASE_TAG_NAME }}    
  
  release-semvar:
    name: Determine SemVar Release Name & Tag
    needs: [build-hugo]
    if: inputs.release-tag-name-type == 'semvar'
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: "${{ inputs.github-repository }}"
          fetch-depth: 0 # required for github-action-get-previous-tag

      - id: previoustag
        name: Get previous tag
        uses: 'WyriHaximus/github-action-get-previous-tag@v1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          fallback: 0.0.9
          prefix: v

      - id: semver
        name: Get next minor version
        uses: 'WyriHaximus/github-action-next-semvers@v1'
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Set RELEASE_NAME & RELEASE_TAG_NAME env
        run: |
          echo "RELEASE_NAME=${{ steps.semver.outputs.v_patch }}" >> $GITHUB_ENV
          echo "RELEASE_TAG_NAME=${{ steps.semver.outputs.v_patch }}" >> $GITHUB_ENV
      - name: Set RELEASE_NAME & RELEASE_TAG_NAME env
        if: steps.semver.outputs.tag == '0.9.0'
        run: |
          echo "RELEASE_NAME=${{ steps.semver.outputs.v_minor }}" >> $GITHUB_ENV
          echo "RELEASE_TAG_NAME=${{ steps.semver.outputs.v_minor }}" >> $GITHUB_ENV

    outputs:
      release_name: ${{ env.RELEASE_NAME }}    
      release_tag_name: ${{ env.RELEASE_TAG_NAME }}    
 
  release-create:
    name: Create Release
    needs: [release-semvar, release-iso]
    if: ${{ always() && !cancelled() && (needs.release-semvar.result == 'success' || needs.release-iso.result == 'success') }}
    runs-on: ubuntu-latest
    steps:

      - if: inputs.release-tag-name-type == 'iso'
        run: |
          echo "RELEASE_NAME=${{ needs.release-iso.outputs.release_name }}" >> $GITHUB_ENV
          echo "RELEASE_TAG_NAME=${{ needs.release-iso.outputs.release_tag_name }}" >> $GITHUB_ENV
      - if: inputs.release-tag-name-type == 'semvar'
        run: |
          echo "RELEASE_NAME=${{ needs.release-semvar.outputs.release_name }}" >> $GITHUB_ENV
          echo "RELEASE_TAG_NAME=${{ needs.release-semvar.outputs.release_tag_name }}" >> $GITHUB_ENV

      - name: Transfer build artifact to this workspace
        uses: actions/download-artifact@v3
        with:
          name: "${{ inputs.build-artifact-name }}"
          path: .
      - run: ls -l

      - name: Generate RELEASE.md
        run: |
          echo '`github` context:' > RELEASE.md
          echo '```' >> RELEASE.md
          echo "run_id: ${{ inputs.github-run-id }}" >> RELEASE.md
          echo "workflow: ${{ inputs.github-workflow }}" >> RELEASE.md
          echo "workflow_ref: ${{ inputs.github-workflow-ref }}" >> RELEASE.md
          echo "workflow_sha: ${{ inputs.github-workflow-sha }}" >> RELEASE.md
          echo "workspace: ${{ inputs.github-workspace }}" >> RELEASE.md
          echo "repository: ${{ inputs.github-repository }}" >> RELEASE.md
          echo "repository_owner: ${{ inputs.github-repository-owner }}" >> RELEASE.md
          echo "repository_name: ${{ inputs.github-repository-name }}" >> RELEASE.md
          echo "repositoryUrl: ${{ inputs.github-repositoryUrl }}" >> RELEASE.md
          echo "action_ref: ${{ inputs.github-action-ref }}" >> RELEASE.md
          echo "event_name: ${{ inputs.github-event-name }}" >> RELEASE.md
          echo "actor: ${{ inputs.github-actor }}" >> RELEASE.md
          echo "triggering_actor: ${{ inputs.github-triggering-actor }}" >> RELEASE.md
          echo "base_ref: ${{ inputs.github-base-ref }}" >> RELEASE.md
          echo "ref_name: ${{ inputs.github-ref-name }}" >> RELEASE.md
          echo "ref_type: ${{ inputs.github-ref-type }}" >> RELEASE.md
          echo "ref: ${{ inputs.github-ref }}" >> RELEASE.md
          echo "sha: ${{ inputs.github-sha }}" >> RELEASE.md
          echo '```' >> RELEASE.md

      - id: create_release
        name: Create semvar release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: "${{ inputs.github-repository-owner }}"
          repo: "${{ inputs.github-repository-name }}"
          release_name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.RELEASE_TAG_NAME }}
          body_path: "./RELEASE.md" 
    
      - id: upload-release-asset
        name: Upload Release Tarball Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./${{ inputs.build-artifact-name }}.tar.gz"
          asset_name: "${{ inputs.build-artifact-name }}.tar.gz"
          asset_content_type: application/tar+gzip
    outputs:
      release_name: ${{ env.RELEASE_NAME }}

  release-notify:
    name: Release Notification
    needs: release-create
    if: ${{ always() && !cancelled() && needs.release-create.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: rtCamp/action-slack-notify@v2.2.0
        env:
          MSG_MINIMAL: true
          #SLACK_COLOR: '#c32a26'
          SLACK_COLOR: '#fab005'
          #SLACK_COLOR: '#58a459'
          SLACK_MESSAGE: "```ref: ${{ github.ref }}\nworkflow_ref: ${{ github.workflow_ref }}```"
          SLACK_TITLE: 'Ready to Deploy :rocket: - `${{ github.repository }}` Release ${{ needs.release-create.outputs.release_name }}'
          SLACK_USERNAME: rrchnm-systems
          SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK_SYSTEMS }}"

######################
###   DEPLOYMENT   ###
######################

  deploy-ansible-playbook:
    runs-on: self-hosted
    needs: release-create
    if: ${{ always() && !cancelled() && needs.release-create.result == 'success' }}
    steps:
      - run: run-ansible-playbook.sh playbooks/deploy-ssg-website.yaml -e input_website_fqdn=${{ inputs.website-fqdn }}

  deploy-notify:
    name: Deployment Notification
    needs: deploy-ansible-playbook
    if: ${{ always() && !cancelled() && (needs.deploy-ansible-playbook.result != 'success' || needs.release-create.result != 'success') }}
    runs-on: ubuntu-latest
    steps:
      - uses: rtCamp/action-slack-notify@v2.2.0
        env:
          MSG_MINIMAL: true
          SLACK_COLOR: '#c32a26'
          SLACK_MESSAGE: "```ref: ${{ github.ref }}\nworkflow_ref: ${{ github.workflow_ref }}```"
          SLACK_TITLE: 'Deployment Failed - `${{ github.repository }}` Release ${{ needs.release-create.outputs.release_name }}'
          SLACK_USERNAME: rrchnm-systems
          SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK_SYSTEMS }}"
